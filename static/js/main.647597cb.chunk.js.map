{"version":3,"sources":["context/email/emailContext.js","context/email/emailReducer.js","context/types.js","context/email/EmailState.js","Components/MailboxList/MailboxList.js","Components/Helper.js","Components/EmailList/EmailRow.js","Components/EmailList/EmailList.js","pages/Main.js","pages/SignIn.js","App.js","index.js"],"names":["emailContext","createContext","state","action","type","messages","payload","loading","message","currentLabel","nextPageToken","hasMoreMessages","EmailState","props","useReducer","EmailReducer","isAuthorize","dispatch","getMessagesData","resp","result","forEach","window","gapi","client","gmail","users","get","userId","id","execute","setNextPageToken","token","setHasMoreMessages","bool","clearMessages","setLoading","Provider","value","getMessages","labelIds","request","list","maxResults","getMessagesQuery","query","q","getOneMessage","messageId","console","log","setCurrentLabel","labelId","loadMoreMessages","pageToken","children","MailboxList","useContext","EmailContext","useState","active","setActive","Box","w","h","bg","border","borderColor","borderTopLeftRadius","borderBottomLeftRadius","List","Button","py","pl","leftIcon","MdInbox","variantColor","variant","justifyContent","onClick","e","categoryId","target","getHeader","headers","name","header","find","undefined","EmailRow","handleMessageClick","split","replace","subject","msg","html","txt","document","createElement","innerHTML","decodeHtml","snippet","substr","backgroundColor","indexOf","Flex","key","wrap","justify","borderTop","borderBottom","cursor","Avatar","src","Text","fontSize","color","isTruncated","fontWeight","prototype","PropTypes","object","isRequired","func","Messages","currentTarget","getAttribute","overflowY","dataLength","length","next","hasMore","loader","scrollableTarget","map","index","CustomSpinner","mt","display","align","Spinner","thickness","speed","emptyColor","size","EmailList","direction","Main","useEffect","minH","p","SignIn","handleAuthClick","alignItems","isLoading","FcGoogle","height","App","setIsAuthorize","a","load","callback","process","setApiKey","auth","authorize","client_id","scope","immediate","handleAuthResult","onerror","timeout","ontimeout","authResult","error","loadClient","then","res","err","ThemeProvider","CSSReset","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.647597cb.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst emailContext = createContext();\n\nexport default emailContext;\n","import {\n  SET_MESSAGE,\n  SET_MESSAGES,\n  CLEAR_MESSAGES,\n  SET_LOADING,\n  SET_CURRENT_LABEL,\n  SET_NEXT_PAGE_TOKEN,\n  SET_HAS_MORE_MESSAGES,\n} from \"../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_MESSAGES:\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n        loading: false,\n      };\n\n    case SET_MESSAGE:\n      return {\n        ...state,\n        message: action.payload,\n      };\n\n    case SET_CURRENT_LABEL:\n      return {\n        ...state,\n        currentLabel: action.payload,\n      };\n\n    case SET_NEXT_PAGE_TOKEN: {\n      return {\n        ...state,\n        nextPageToken: action.payload,\n      };\n    }\n\n    case SET_HAS_MORE_MESSAGES: {\n      return {\n        ...state,\n        hasMoreMessages: action.payload,\n      };\n    }\n\n    case CLEAR_MESSAGES: {\n      return {\n        ...state,\n        messages: [],\n      };\n    }\n\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    default:\n      return state;\n  }\n};\n","// Email Context Variables\nexport const SET_MESSAGE = \"SET_MESSAGE\";\nexport const GET_MESSAGE = \"GET_MESSAGE\";\nexport const SET_MESSAGES = \"SET_MESSAGES\";\nexport const GET_MESSAGES = \"GET_MESSAGES\";\nexport const CLEAR_MESSAGES = \"CLEAR_MESSAGES\";\nexport const SET_LOADING = \"SET_LOADING\";\nexport const SET_CURRENT_LABEL = \"SET_CURRENT_LABEL\";\nexport const GET_CURRENT_LABEL = \"GET_CURRENT_LABEL\";\nexport const SET_NEXT_PAGE_TOKEN = \"SET_NEXT_PAGE_TOKEN\";\nexport const SET_HAS_MORE_MESSAGES = \"SET_HAS_MORE_MESSAGES\";\n\n// Authentication Context Variables\nexport const SET_IS_AUTHORIZE = \"SET_IS_AUTHORIZE\";\n","import React, { useReducer } from \"react\";\nimport EmailContext from \"./emailContext\";\nimport EmailReducer from \"./emailReducer\";\nimport {\n  SET_MESSAGE,\n  SET_MESSAGES,\n  CLEAR_MESSAGES,\n  SET_LOADING,\n  SET_CURRENT_LABEL,\n  SET_NEXT_PAGE_TOKEN,\n  SET_HAS_MORE_MESSAGES,\n} from \"../types\";\n\nconst EmailState = (props) => {\n  const initialState = {\n    messages: [],\n    message: null,\n    currentLabel: \"INBOX\",\n    nextPageToken: \"\",\n    hasMoreMessages: true,\n    isAuthorize: false,\n    loading: false,\n  };\n\n  const [state, dispatch] = useReducer(EmailReducer, initialState);\n\n  // Send reques to get IDs of 20 Messages and call getMessagesData(Ids)\n  const getMessages = (labelIds = state.currentLabel) => {\n    // Set Loading to true\n    setLoading();\n\n    // Empty previous messages\n    clearMessages();\n\n    const request = window.gapi.client.gmail.users.messages.list({\n      userId: \"me\",\n      labelIds: labelIds,\n      maxResults: 20,\n    });\n\n    request.execute((resp) => {\n      // Set NextPageToken\n      if (resp.result.nextPageToken) {\n        setNextPageToken(resp.result.nextPageToken);\n        setHasMoreMessages(true);\n      } else {\n        setNextPageToken(\"\");\n        setHasMoreMessages(false);\n      }\n\n      // Send Id list to getMessagesData to get Message Data foreach Id\n      getMessagesData(resp);\n    });\n  };\n\n  const getMessagesQuery = (query) => {\n    // Set Loading to true\n    setLoading();\n\n    // Empty previous messages\n    clearMessages();\n\n    // Get List of 20 message's Id\n    const request = window.gapi.client.gmail.users.messages.list({\n      userId: \"me\",\n      q: query,\n    });\n\n    // Send Id list to getMessagesData to get Message Data foreach Id\n    request.execute(getMessagesData);\n  };\n\n  // Send Request to get data of each message\n  const getMessagesData = (resp) => {\n    const messages = resp.result.messages ? resp.result.messages : [];\n\n    // Get Data for each message\n    messages.forEach((message) => {\n      const request = window.gapi.client.gmail.users.messages.get({\n        userId: \"me\",\n        id: message.id,\n      });\n\n      request.execute((resp) => {\n        dispatch({\n          type: SET_MESSAGES,\n          payload: resp.result,\n        });\n      });\n    });\n  };\n\n  // Get Message\n  const getOneMessage = (messageId) => {\n    const request = window.gapi.client.gmail.users.messages.get({\n      userId: \"me\",\n      id: messageId,\n    });\n\n    request.execute((resp) => {\n      console.log(resp);\n      dispatch({\n        type: SET_MESSAGE,\n        payload: resp.result,\n      });\n    });\n  };\n\n  // Load More Messages\n  const loadMoreMessages = (labelIds = state.currentLabel) => {\n    const request = window.gapi.client.gmail.users.messages.list({\n      userId: \"me\",\n      labelIds: labelIds,\n      maxResults: 20,\n      pageToken: state.nextPageToken,\n    });\n\n    request.execute((resp) => {\n      if (resp.result.nextPageToken) {\n        setNextPageToken(resp.result.nextPageToken);\n        setHasMoreMessages(true);\n      } else {\n        setNextPageToken(\"\");\n        setHasMoreMessages(false);\n      }\n\n      getMessagesData(resp);\n    });\n  };\n\n  // Set Next Page Token\n  const setNextPageToken = (token) =>\n    dispatch({ type: SET_NEXT_PAGE_TOKEN, payload: token });\n\n  // Set Has More Messages\n  const setHasMoreMessages = (bool) =>\n    dispatch({ type: SET_HAS_MORE_MESSAGES, payload: bool });\n\n  // Set Current Label\n  const setCurrentLabel = (labelId) =>\n    dispatch({ type: SET_CURRENT_LABEL, payload: labelId });\n\n  // Clear Messages\n  const clearMessages = () => dispatch({ type: CLEAR_MESSAGES });\n\n  // Set Loading\n  const setLoading = () => dispatch({ type: SET_LOADING });\n\n  return (\n    <EmailContext.Provider\n      value={{\n        messages: state.messages,\n        message: state.message,\n        currentLabel: state.currentLabel,\n        nextPageToken: state.nextPageToken,\n        hasMoreMessages: state.hasMoreMessages,\n        loading: state.loading,\n        getMessages,\n        getMessagesQuery,\n        getOneMessage,\n        setCurrentLabel,\n        loadMoreMessages,\n        setLoading,\n      }}\n    >\n      {props.children}\n    </EmailContext.Provider>\n  );\n};\n\nexport default EmailState;\n","import React, { useState, useContext } from \"react\";\nimport EmailContext from \"../../context/email/emailContext\";\nimport SendModel from \"./SendModel\";\n\n// Import Icons\nimport { Button, Box, List, ListItem } from \"@chakra-ui/core\";\n// import { MdLabel, MdStar,MdLoyalty } from \"react-icons/md\";\nimport {  MdPeople, MdInbox } from \"react-icons/md\";\n// import { FiSend, FiFile } from \"react-icons/fi\";\n\nconst MailboxList = () => {\n  const { getMessages, getMessagesQuery, setCurrentLabel } = useContext(EmailContext);\n  const [active, setActive] = useState(\"INBOX\");\n\n  const handleClick = (e) => {\n    const categoryId = e.target.id;\n    setActive(categoryId);\n    setCurrentLabel(categoryId);\n\n    // Get Messages using clicked category\n    getMessages(categoryId);\n    getMessagesQuery(\"Daily Standup\");\n  };\n\n  return (\n    <Box\n      w='16%'\n      h='100%'\n      bg='white'\n      border='1px'\n      borderColor='gray.200'\n      borderTopLeftRadius='md'\n      borderBottomLeftRadius='md'\n    >\n      <List>\n        {/* Send Model */}\n        {/* <ListItem p='0.5rem 1rem 1rem'>\n          <SendModel />\n        </ListItem> */}\n\n        {/* Labels Buttons */}\n        <ListItem>\n          <Button\n            id='INBOX'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={MdInbox}\n            variantColor='blue'\n            variant={active === \"INBOX\" ? \"solid\" : \"ghost\"}\n            justifyContent='flex-start'\n            onClick={handleClick}\n          >\n            List email\n          </Button>\n        </ListItem>\n        <ListItem>\n          {/* <Button\n            id='STARRED'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={MdStar}\n            variantColor='blue'\n            variant={active === \"STARRED\" ? \"solid\" : \"ghost\"}\n            justifyContent='flex-start'\n            onClick={handleClick}\n          >\n            Starred\n          </Button> */}\n        </ListItem>\n        <ListItem>\n          {/* <Button\n            id='IMPORTANT'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={MdLabel}\n            variantColor='blue'\n            variant={active === \"IMPORTANT\" ? \"solid\" : \"ghost\"}\n            justifyContent='flex-start'\n            onClick={handleClick}\n          >\n            Important\n          </Button> */}\n        </ListItem>\n        <ListItem>\n          {/* <Button\n            id='SENT'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={FiSend}\n            variantColor='blue'\n            variant={active === \"SENT\" ? \"solid\" : \"ghost\"}\n            justifyContent='flex-start'\n            onClick={handleClick}\n          >\n            Sent\n          </Button> */}\n        </ListItem>\n        <ListItem>\n          {/* <Button\n            id='DRAFT'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={FiFile}\n            variantColor='blue'\n            variant={active === \"DRAFT\" ? \"solid\" : \"ghost\"}\n            justifyContent='flex-start'\n            onClick={handleClick}\n          >\n            Drafts\n          </Button> */}\n        </ListItem>\n        <ListItem>\n          {/* <Button\n            id='TRASH'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon='delete'\n            variantColor='blue'\n            variant={active === \"TRASH\" ? \"solid\" : \"ghost\"}\n            justifyContent='flxex-start'\n            onClick={handleClick}\n          >\n            Trash\n          </Button> */}\n        </ListItem>\n        <ListItem>\n          {/* <Button\n            id='CATEGORY_SOCIAL'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={MdPeople}\n            variantColor='blue'\n            variant={active === \"CATEGORY_SOCIAL\" ? \"solid\" : \"ghost\"}\n            justifyContent='flxex-start'\n            onClick={handleClick}\n          >\n            Social\n          </Button> */}\n        </ListItem>\n        <ListItem>\n          {/* <Button\n            id='CATEGORY_PROMOTIONS'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={MdLoyalty}\n            variantColor='blue'\n            variant={active === \"CATEGORY_PROMOTIONS\" ? \"solid\" : \"ghost\"}\n            justifyContent='flxex-start'\n            onClick={handleClick}\n          >\n            Promotions\n          </Button> */}\n        </ListItem>\n      </List>\n    </Box>\n  );\n};\n\nexport default MailboxList;\n","export const getHeader = (headers, name) => {\n  const header = headers.find((header) => header.name === name);\n  return header !== undefined ? header.value : undefined;\n};\n\nexport const isEmpty = (obj) => {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n  return true;\n};\n\nexport const decodeHtml = (html) => {\n  let txt = document.createElement(\"textarea\");\n  txt.innerHTML = html;\n  return txt.value;\n};\n\nexport const removeQuote = (str) => {\n  return str.replace(/['\"]+/g, \"\");\n};\n\nexport const formatDate = (strDate) => {\n  const date = new Date(strDate);\n  const options = {\n    year: \"numeric\",\n    month: \"numeric\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true,\n  };\n  return new Intl.DateTimeFormat(\"en-US\", options).format(date);\n};\n","import React from \"react\";\nimport { getHeader, decodeHtml, removeQuote } from \"../Helper\";\nimport { Flex, Box, Avatar, Text } from \"@chakra-ui/core\";\nimport PropTypes from \"prop-types\";\n\nconst EmailRow = ({ message, handleMessageClick }) => {\n  // Get name of email sender\n  const name = removeQuote(\n    getHeader(message.payload.headers, \"From\").split(\"<\")[0]\n  );\n\n  // Get subject of email\n  const subject = getHeader(message.payload.headers, \"Subject\");\n\n  // Get part of email snippet\n  const msg = decodeHtml(message.snippet.substr(0, 75));\n\n  // Set backgroundColor to white if the mail is not yet opened\n  const backgroundColor =\n    message.labelIds.indexOf(\"UNREAD\") > -1 ? \"#fff\" : \"#E2E8F0\";\n\n  return (\n    <Flex\n      key={message.id}\n      id={message.id}\n      onClick={handleMessageClick}\n      wrap='no-wrap'\n      justify='space-around'\n      py={2}\n      bg={backgroundColor}\n      borderTop='1px'\n      borderBottom='1px'\n      borderColor='gray.300'\n      cursor='pointer'\n    >\n      <Avatar name={name} src='https://bit.ly/tioluwani-kolawole' />\n      <Box w='80%'>\n        <Text fontSize='sm' color='gray.700' isTruncated>\n          {name}\n        </Text>\n        <Text fontSize='md' fontWeight='bold' color='#3182ce' isTruncated>\n          {subject}\n        </Text>\n        <Text fontSize='xs' color='gray.500'>\n          {msg}\n        </Text>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default EmailRow;\n\nEmailRow.prototype = {\n  message: PropTypes.object.isRequired,\n  handleMessageClick: PropTypes.func.isRequired,\n};\n","import React, { useContext } from \"react\";\nimport EmailContext from \"../../context/email/emailContext\";\n\nimport EmailRow from \"./EmailRow\";\n// import SearchBar from \"./SearchBar\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Flex, Box, Spinner } from \"@chakra-ui/core\";\n\nconst Messages = () => {\n  const {\n    messages,\n    getOneMessage,\n    hasMoreMessages,\n    loadMoreMessages,\n  } = useContext(EmailContext);\n\n  const handleMessageClick = (e) => {\n    const messageId = e.currentTarget.getAttribute(\"id\");\n    getOneMessage(messageId);\n  };\n\n  return (\n    <Box overflowY='auto' id='scrollableDiv'>\n      <InfiniteScroll\n        dataLength={messages.length}\n        next={loadMoreMessages}\n        hasMore={hasMoreMessages}\n        loader={<h4>Loading...</h4>}\n        scrollableTarget='scrollableDiv'\n      >\n        {messages.map((message, index) => (\n          <EmailRow\n            key={index}\n            message={message}\n            handleMessageClick={handleMessageClick}\n          />\n        ))}\n      </InfiniteScroll>\n    </Box>\n  );\n};\n\nconst CustomSpinner = () => (\n  <Box mt={6} display='flex' align='center' justifyContent='center'>\n    <Spinner\n      thickness='4px'\n      speed='0.65s'\n      emptyColor='gray.200'\n      color='blue.500'\n      size='xl'\n    />\n  </Box>\n);\n\nconst EmailList = () => {\n  const { messages, loading } = useContext(EmailContext);\n\n  return (\n    <Flex\n      direction='column'\n      wrap='no-wrap'\n      w='80%'\n      h='100%'\n      bg='#f1f1f1'\n      color='black'\n    >\n      {/* Search bar */}\n      {/* <SearchBar /> */}\n\n      {/* Messages */}\n      {!messages.length && loading ? <CustomSpinner /> : <Messages />}\n    </Flex>\n  );\n};\n\nexport default EmailList;\n","import React, { useEffect, useContext } from \"react\";\nimport EmailContext from \"../context/email/emailContext\"\n\n// Import Components\nimport MailboxList from \"../Components/MailboxList/MailboxList\";\nimport EmailList from \"../Components/EmailList/EmailList\";\n// import Email from \"../Components/Email/Email\";\n\nimport { Flex } from \"@chakra-ui/core\";\n\nconst Main = () => {\n  const { getMessages } = useContext(EmailContext);\n\n  useEffect(() => {\n    getMessages();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Flex\n      h='100vh'\n      minH='600px'\n      justify='space-arround'\n      wrap='no-wrap'\n      p='1em'\n      bg='#e5f4f1'\n      color='white'\n    >\n      <MailboxList />\n      <EmailList />\n      {/* <Email /> */}\n    </Flex>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport { Button, Flex } from \"@chakra-ui/core\";\nimport { FcGoogle } from \"react-icons/fc\";\n\nconst SignIn = ({ handleAuthClick, loading }) => (\n  <Flex h='100vh' justify='center' alignItems='center' bg='#e5f4f1'>\n    <Button\n      isLoading={loading}\n      leftIcon={FcGoogle}\n      height='50px'\n      variantColor='blue'\n      variant='outline'\n      backgroundColor='white'\n      onClick={handleAuthClick}\n    >\n      Sign in with Google\n    </Button>\n  </Flex>\n);\n\nexport default SignIn;\n","import React, { useEffect, useState } from \"react\";\n\n// Import Context\nimport EmailState from \"./context/email/EmailState\";\n\n// Import Pages\nimport Main from \"./pages/Main\";\nimport SignIn from \"./pages/SignIn\";\n\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\n\nconst App = () => {\n  const [isAuthorize, setIsAuthorize] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      await window.gapi.load(\"client:auth2\", {\n        callback: () => {\n          // Handle gapi.client initialization.\n          console.log(\"gmail\",process.env.REACT_APP_API_KEY)\n          window.gapi.client.setApiKey(process.env.REACT_APP_API_KEY);\n          window.gapi.auth.authorize(\n            {\n              client_id: process.env.REACT_APP_CLIENT_ID,\n              scope: process.env.REACT_APP_SCOPES,\n              immediate: true,\n            },\n            handleAuthResult\n          );\n        },\n        onerror: function () {\n          // Handle loading error.\n          console.log(\"gapi.client failed to load!\");\n          setLoading(false);\n        },\n        timeout: 5000, // 5 seconds.\n        ontimeout: function () {\n          // Handle timeout.\n          console.log(\"gapi.client could not load in a timely manner!\");\n        },\n      });\n    })();\n\n    // eslint-disable-next-line\n  }, []);\n\n  const handleAuthResult = (authResult) => {\n    if (authResult && !authResult.error) {\n      console.log(\"Sign-in successful\");\n      // setIsAuthorize(true);\n      loadClient();\n    } else {\n      console.error(\"handleAuthResult...\");\n      console.error(authResult);\n      setLoading(false);\n    }\n  };\n\n  const handleAuthClick = () => {\n    setLoading(true);\n    return window.gapi.auth.authorize(\n      {\n        client_id: process.env.REACT_APP_CLIENT_ID,\n        scope: process.env.REACT_APP_SCOPES,\n        immediate: false,\n      },\n      handleAuthResult\n    );\n  };\n\n  const loadClient = () => {\n    return window.gapi.client.load(\"gmail\", \"v1\").then(\n      (res) => {\n        console.log(\"gapi client loaded for API\");\n        setIsAuthorize(true);\n        // getMessages();\n      },\n      (err) => {\n        console.error(\"Error loading window.gapi client for API\", err);\n      }\n    );\n  };\n\n  return (\n    <EmailState>\n      <ThemeProvider>\n        <CSSReset />\n        {isAuthorize ? (\n          <Main />\n        ) : (\n          <SignIn loading={loading} handleAuthClick={handleAuthClick} />\n        )}\n      </ThemeProvider>\n    </EmailState>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}