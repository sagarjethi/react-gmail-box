{"version":3,"sources":["context/email/emailContext.js","context/email/emailReducer.js","context/types.js","context/email/EmailState.js","Components/MailboxList/SendModel.js","Components/MailboxList/MailboxList.js","Components/Helper.js","Components/EmailList/EmailRow.js","Components/EmailList/SearchBar.js","Components/EmailList/EmailList.js","Components/Email/ReplyModel.js","Components/Email/ForwardModel.js","Components/Email/Email.js","pages/Main.js","pages/SignIn.js","App.js","index.js","Components/Email/empty_email.svg"],"names":["emailContext","createContext","state","action","type","messages","payload","loading","message","currentLabel","nextPageToken","hasMoreMessages","EmailState","props","useReducer","EmailReducer","isAuthorize","dispatch","getMessagesData","resp","result","forEach","window","gapi","client","gmail","users","get","userId","id","execute","setNextPageToken","token","setHasMoreMessages","bool","clearMessages","setLoading","Provider","value","getMessages","labelIds","request","list","maxResults","getMessagesQuery","query","q","getOneMessage","messageId","console","log","setCurrentLabel","labelId","loadMoreMessages","pageToken","children","SendModel","useDisclosure","isOpen","onOpen","onClose","toast","useToast","sendMessage","headers_obj","callback","email","header","base64EncodedEmail","Base64","encodeURI","send","resource","raw","displayToast","indexOf","title","description","status","duration","isClosable","Button","w","h","leftIcon","BsPlusCircle","borderRadius","variant","variantColor","onClick","Modal","size","closeOnOverlayClick","onSubmit","e","preventDefault","form","target","emailTo","elements","subject","To","Subject","FormControl","isRequired","Input","placeholder","aria-describedby","Textarea","minH","resize","mr","MailboxList","useContext","EmailContext","useState","active","setActive","handleClick","categoryId","Box","bg","border","borderColor","borderTopLeftRadius","borderBottomLeftRadius","List","p","py","pl","MdInbox","justifyContent","MdStar","MdLabel","FiSend","FiFile","MdPeople","MdLoyalty","getHeader","headers","name","find","undefined","removeQuote","str","replace","EmailRow","handleMessageClick","split","msg","html","txt","document","createElement","innerHTML","decodeHtml","snippet","substr","backgroundColor","Flex","key","wrap","justify","borderTop","borderBottom","cursor","Avatar","src","Text","fontSize","color","isTruncated","fontWeight","prototype","PropTypes","object","func","SearchBar","setQuery","handleQuery","keyCode","InputGroup","IconButton","icon","marginLeft","aria-label","isLoading","borderWidth","focusBorderColor","onChange","onKeyDown","Messages","currentTarget","getAttribute","overflowY","dataLength","length","next","hasMore","loader","scrollableTarget","map","index","CustomSpinner","mt","display","align","Spinner","thickness","speed","emptyColor","EmailList","direction","ReplyModel","replayData","rightIcon","MdReplay","replayMsgId","msgId","readOnly","to","ForwardModel","forwardData","getMessageBody","handleForwardMsg","forwardTo","body","MdArrowForward","getForwardHead","Email","React","useEffect","addToFrame","getElementById","contentWindow","encodedBody","parts","data","getHTMLPart","decode","arr","x","mimeType","borderTopRightRadius","borderBottomRightRadius","mb","replayTo","replaySubject","formatReplayData","MdArchive","ids","batchModify","removeLabelIds","then","catch","error","trash","className","flexGrow","strDate","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","formatDate","AspectRatioBox","ratio","as","EmptyMail","flexDirection","alignItems","style","height","emptyEmailImg","alt","width","Heading","Main","SignIn","handleAuthClick","FcGoogle","App","setIsAuthorize","a","load","process","setApiKey","auth","authorize","client_id","scope","immediate","handleAuthResult","onerror","timeout","ontimeout","authResult","loadClient","res","err","ThemeProvider","CSSReset","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.78591164.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst emailContext = createContext();\n\nexport default emailContext;\n","import {\n  SET_MESSAGE,\n  SET_MESSAGES,\n  CLEAR_MESSAGES,\n  SET_LOADING,\n  SET_CURRENT_LABEL,\n  SET_NEXT_PAGE_TOKEN,\n  SET_HAS_MORE_MESSAGES,\n} from \"../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_MESSAGES:\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n        loading: false,\n      };\n\n    case SET_MESSAGE:\n      return {\n        ...state,\n        message: action.payload,\n      };\n\n    case SET_CURRENT_LABEL:\n      return {\n        ...state,\n        currentLabel: action.payload,\n      };\n\n    case SET_NEXT_PAGE_TOKEN: {\n      return {\n        ...state,\n        nextPageToken: action.payload,\n      };\n    }\n\n    case SET_HAS_MORE_MESSAGES: {\n      return {\n        ...state,\n        hasMoreMessages: action.payload,\n      };\n    }\n\n    case CLEAR_MESSAGES: {\n      return {\n        ...state,\n        messages: [],\n      };\n    }\n\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    default:\n      return state;\n  }\n};\n","// Email Context Variables\nexport const SET_MESSAGE = \"SET_MESSAGE\";\nexport const GET_MESSAGE = \"GET_MESSAGE\";\nexport const SET_MESSAGES = \"SET_MESSAGES\";\nexport const GET_MESSAGES = \"GET_MESSAGES\";\nexport const CLEAR_MESSAGES = \"CLEAR_MESSAGES\";\nexport const SET_LOADING = \"SET_LOADING\";\nexport const SET_CURRENT_LABEL = \"SET_CURRENT_LABEL\";\nexport const GET_CURRENT_LABEL = \"GET_CURRENT_LABEL\";\nexport const SET_NEXT_PAGE_TOKEN = \"SET_NEXT_PAGE_TOKEN\";\nexport const SET_HAS_MORE_MESSAGES = \"SET_HAS_MORE_MESSAGES\";\n\n// Authentication Context Variables\nexport const SET_IS_AUTHORIZE = \"SET_IS_AUTHORIZE\";\n","import React, { useReducer } from \"react\";\nimport EmailContext from \"./emailContext\";\nimport EmailReducer from \"./emailReducer\";\nimport {\n  SET_MESSAGE,\n  SET_MESSAGES,\n  CLEAR_MESSAGES,\n  SET_LOADING,\n  SET_CURRENT_LABEL,\n  SET_NEXT_PAGE_TOKEN,\n  SET_HAS_MORE_MESSAGES,\n} from \"../types\";\n\nconst EmailState = (props) => {\n  const initialState = {\n    messages: [],\n    message: null,\n    currentLabel: \"INBOX\",\n    nextPageToken: \"\",\n    hasMoreMessages: true,\n    isAuthorize: false,\n    loading: false,\n  };\n\n  const [state, dispatch] = useReducer(EmailReducer, initialState);\n\n  // Send reques to get IDs of 20 Messages and call getMessagesData(Ids)\n  const getMessages = (labelIds = state.currentLabel) => {\n    // Set Loading to true\n    setLoading();\n\n    // Empty previous messages\n    clearMessages();\n\n    const request = window.gapi.client.gmail.users.messages.list({\n      userId: \"me\",\n      labelIds: labelIds,\n      maxResults: 20,\n    });\n\n    request.execute((resp) => {\n      // Set NextPageToken\n      if (resp.result.nextPageToken) {\n        setNextPageToken(resp.result.nextPageToken);\n        setHasMoreMessages(true);\n      } else {\n        setNextPageToken(\"\");\n        setHasMoreMessages(false);\n      }\n\n      // Send Id list to getMessagesData to get Message Data foreach Id\n      getMessagesData(resp);\n    });\n  };\n\n  const getMessagesQuery = (query) => {\n    // Set Loading to true\n    setLoading();\n\n    // Empty previous messages\n    clearMessages();\n\n    // Get List of 20 message's Id\n    const request = window.gapi.client.gmail.users.messages.list({\n      userId: \"me\",\n      q: query,\n    });\n\n    // Send Id list to getMessagesData to get Message Data foreach Id\n    request.execute(getMessagesData);\n  };\n\n  // Send Request to get data of each message\n  const getMessagesData = (resp) => {\n    const messages = resp.result.messages ? resp.result.messages : [];\n\n    // Get Data for each message\n    messages.forEach((message) => {\n      const request = window.gapi.client.gmail.users.messages.get({\n        userId: \"me\",\n        id: message.id,\n      });\n\n      request.execute((resp) => {\n        dispatch({\n          type: SET_MESSAGES,\n          payload: resp.result,\n        });\n      });\n    });\n  };\n\n  // Get Message\n  const getOneMessage = (messageId) => {\n    const request = window.gapi.client.gmail.users.messages.get({\n      userId: \"me\",\n      id: messageId,\n    });\n\n    request.execute((resp) => {\n      console.log(resp);\n      dispatch({\n        type: SET_MESSAGE,\n        payload: resp.result,\n      });\n    });\n  };\n\n  // Load More Messages\n  const loadMoreMessages = (labelIds = state.currentLabel) => {\n    const request = window.gapi.client.gmail.users.messages.list({\n      userId: \"me\",\n      labelIds: labelIds,\n      maxResults: 20,\n      pageToken: state.nextPageToken,\n    });\n\n    request.execute((resp) => {\n      if (resp.result.nextPageToken) {\n        setNextPageToken(resp.result.nextPageToken);\n        setHasMoreMessages(true);\n      } else {\n        setNextPageToken(\"\");\n        setHasMoreMessages(false);\n      }\n\n      getMessagesData(resp);\n    });\n  };\n\n  // Set Next Page Token\n  const setNextPageToken = (token) =>\n    dispatch({ type: SET_NEXT_PAGE_TOKEN, payload: token });\n\n  // Set Has More Messages\n  const setHasMoreMessages = (bool) =>\n    dispatch({ type: SET_HAS_MORE_MESSAGES, payload: bool });\n\n  // Set Current Label\n  const setCurrentLabel = (labelId) =>\n    dispatch({ type: SET_CURRENT_LABEL, payload: labelId });\n\n  // Clear Messages\n  const clearMessages = () => dispatch({ type: CLEAR_MESSAGES });\n\n  // Set Loading\n  const setLoading = () => dispatch({ type: SET_LOADING });\n\n  return (\n    <EmailContext.Provider\n      value={{\n        messages: state.messages,\n        message: state.message,\n        currentLabel: state.currentLabel,\n        nextPageToken: state.nextPageToken,\n        hasMoreMessages: state.hasMoreMessages,\n        loading: state.loading,\n        getMessages,\n        getMessagesQuery,\n        getOneMessage,\n        setCurrentLabel,\n        loadMoreMessages,\n        setLoading,\n      }}\n    >\n      {props.children}\n    </EmailContext.Provider>\n  );\n};\n\nexport default EmailState;\n","import React, { Fragment } from \"react\";\nimport { Base64 } from \"js-base64\";\nimport { BsPlusCircle } from \"react-icons/bs\";\nimport {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Input,\n  FormControl,\n  Textarea,\n  useToast,\n  useDisclosure,\n} from \"@chakra-ui/core\";\n\nconst SendModel = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const toast = useToast();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const form = e.target;\n    const emailTo = form.elements[\"emailTo\"].value;\n    const subject = form.elements[\"subject\"].value;\n    const message = form.elements[\"message\"].value;\n\n    // Send Simple Mail && Display Toast\n    sendMessage(\n      {\n        To: emailTo,\n        Subject: subject,\n      },\n      message,\n      displayToast\n    );\n\n    onClose();\n  };\n\n  const sendMessage = (headers_obj, message, callback) => {\n    let email = \"\";\n\n    for (var header in headers_obj)\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\n\n    email += \"\\r\\n\" + message;\n\n    const base64EncodedEmail = Base64.encodeURI(email);\n    const request = window.gapi.client.gmail.users.messages.send({\n      userId: \"me\",\n      resource: {\n        raw: base64EncodedEmail,\n      },\n    });\n    request.execute(callback);\n  };\n\n  const displayToast = ({ result }) => {\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\n      toast({\n        title: \"Message Sent.\",\n        description: \"We've Sent your email.\",\n        status: \"success\",\n        duration: 9000,\n        isClosable: true,\n      });\n    } else {\n      toast({\n        title: \"An error occurred.\",\n        description: \"Unable to sent your email.\",\n        status: \"error\",\n        duration: 9000,\n        isClosable: true,\n      });\n    }\n  };\n\n  return (\n    <Fragment>\n      <Button\n        w='100%'\n        h='48px'\n        leftIcon={BsPlusCircle}\n        borderRadius='20px'\n        variant='solid'\n        variantColor='blue'\n        onClick={onOpen}\n      >\n        New Message\n      </Button>\n      <Modal\n        isOpen={isOpen}\n        size='xl'\n        onClose={onClose}\n        closeOnOverlayClick={false}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>New Message</ModalHeader>\n          <ModalCloseButton />\n          <form id='form' onSubmit={handleSubmit}>\n            <ModalBody>\n              <FormControl isRequired>\n                <Input\n                  type='email'\n                  id='emailTo'\n                  placeholder='To'\n                  aria-describedby='email-helper-text'\n                />\n              </FormControl>\n              <FormControl isRequired>\n                <Input\n                  type='text'\n                  id='subject'\n                  placeholder='Subject'\n                  aria-describedby='subject-email-helper-text'\n                />\n              </FormControl>\n              <FormControl isRequired>\n                <Textarea\n                  id='message'\n                  minH='280px'\n                  size='xl'\n                  resize='vertical'\n                />\n              </FormControl>\n            </ModalBody>\n\n            <ModalFooter>\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\n                Close\n              </Button>\n              <Button type='submit' variantColor='green'>\n                Send\n              </Button>\n            </ModalFooter>\n          </form>\n        </ModalContent>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default SendModel;\n","import React, { useState, useContext } from \"react\";\nimport EmailContext from \"../../context/email/emailContext\";\nimport SendModel from \"./SendModel\";\n\n// Import Icons\nimport { Button, Box, List, ListItem } from \"@chakra-ui/core\";\nimport { MdLabel, MdStar, MdPeople, MdLoyalty, MdInbox } from \"react-icons/md\";\nimport { FiSend, FiFile } from \"react-icons/fi\";\n\nconst MailboxList = () => {\n  const { getMessages, setCurrentLabel } = useContext(EmailContext);\n  const [active, setActive] = useState(\"INBOX\");\n\n  const handleClick = (e) => {\n    const categoryId = e.target.id;\n    setActive(categoryId);\n    setCurrentLabel(categoryId);\n\n    // Get Messages using clicked category\n    getMessages(categoryId);\n  };\n\n  return (\n    <Box\n      w='16%'\n      h='100%'\n      bg='white'\n      border='1px'\n      borderColor='gray.200'\n      borderTopLeftRadius='md'\n      borderBottomLeftRadius='md'\n    >\n      <List>\n        {/* Send Model */}\n        <ListItem p='0.5rem 1rem 1rem'>\n          <SendModel />\n        </ListItem>\n\n        {/* Labels Buttons */}\n        <ListItem>\n          <Button\n            id='INBOX'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={MdInbox}\n            variantColor='blue'\n            variant={active === \"INBOX\" ? \"solid\" : \"ghost\"}\n            justifyContent='flex-start'\n            onClick={handleClick}\n          >\n            Inbox\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Button\n            id='STARRED'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={MdStar}\n            variantColor='blue'\n            variant={active === \"STARRED\" ? \"solid\" : \"ghost\"}\n            justifyContent='flex-start'\n            onClick={handleClick}\n          >\n            Starred\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Button\n            id='IMPORTANT'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={MdLabel}\n            variantColor='blue'\n            variant={active === \"IMPORTANT\" ? \"solid\" : \"ghost\"}\n            justifyContent='flex-start'\n            onClick={handleClick}\n          >\n            Important\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Button\n            id='SENT'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={FiSend}\n            variantColor='blue'\n            variant={active === \"SENT\" ? \"solid\" : \"ghost\"}\n            justifyContent='flex-start'\n            onClick={handleClick}\n          >\n            Sent\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Button\n            id='DRAFT'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={FiFile}\n            variantColor='blue'\n            variant={active === \"DRAFT\" ? \"solid\" : \"ghost\"}\n            justifyContent='flex-start'\n            onClick={handleClick}\n          >\n            Drafts\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Button\n            id='TRASH'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon='delete'\n            variantColor='blue'\n            variant={active === \"TRASH\" ? \"solid\" : \"ghost\"}\n            justifyContent='flxex-start'\n            onClick={handleClick}\n          >\n            Trash\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Button\n            id='CATEGORY_SOCIAL'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={MdPeople}\n            variantColor='blue'\n            variant={active === \"CATEGORY_SOCIAL\" ? \"solid\" : \"ghost\"}\n            justifyContent='flxex-start'\n            onClick={handleClick}\n          >\n            Social\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Button\n            id='CATEGORY_PROMOTIONS'\n            w='100%'\n            h='45px'\n            py={2}\n            pl={8}\n            leftIcon={MdLoyalty}\n            variantColor='blue'\n            variant={active === \"CATEGORY_PROMOTIONS\" ? \"solid\" : \"ghost\"}\n            justifyContent='flxex-start'\n            onClick={handleClick}\n          >\n            Promotions\n          </Button>\n        </ListItem>\n      </List>\n    </Box>\n  );\n};\n\nexport default MailboxList;\n","export const getHeader = (headers, name) => {\n  const header = headers.find((header) => header.name === name);\n  return header !== undefined ? header.value : undefined;\n};\n\nexport const isEmpty = (obj) => {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n  return true;\n};\n\nexport const decodeHtml = (html) => {\n  let txt = document.createElement(\"textarea\");\n  txt.innerHTML = html;\n  return txt.value;\n};\n\nexport const removeQuote = (str) => {\n  return str.replace(/['\"]+/g, \"\");\n};\n\nexport const formatDate = (strDate) => {\n  const date = new Date(strDate);\n  const options = {\n    year: \"numeric\",\n    month: \"numeric\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true,\n  };\n  return new Intl.DateTimeFormat(\"en-US\", options).format(date);\n};\n","import React from \"react\";\nimport { getHeader, decodeHtml, removeQuote } from \"../Helper\";\nimport { Flex, Box, Avatar, Text } from \"@chakra-ui/core\";\nimport PropTypes from \"prop-types\";\n\nconst EmailRow = ({ message, handleMessageClick }) => {\n  // Get name of email sender\n  const name = removeQuote(\n    getHeader(message.payload.headers, \"From\").split(\"<\")[0]\n  );\n\n  // Get subject of email\n  const subject = getHeader(message.payload.headers, \"Subject\");\n\n  // Get part of email snippet\n  const msg = decodeHtml(message.snippet.substr(0, 75));\n\n  // Set backgroundColor to white if the mail is not yet opened\n  const backgroundColor =\n    message.labelIds.indexOf(\"UNREAD\") > -1 ? \"#fff\" : \"#E2E8F0\";\n\n  return (\n    <Flex\n      key={message.id}\n      id={message.id}\n      onClick={handleMessageClick}\n      wrap='no-wrap'\n      justify='space-around'\n      py={2}\n      bg={backgroundColor}\n      borderTop='1px'\n      borderBottom='1px'\n      borderColor='gray.300'\n      cursor='pointer'\n    >\n      <Avatar name={name} src='https://bit.ly/tioluwani-kolawole' />\n      <Box w='80%'>\n        <Text fontSize='sm' color='gray.700' isTruncated>\n          {name}\n        </Text>\n        <Text fontSize='md' fontWeight='bold' color='#3182ce' isTruncated>\n          {subject}\n        </Text>\n        <Text fontSize='xs' color='gray.500'>\n          {msg}\n        </Text>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default EmailRow;\n\nEmailRow.prototype = {\n  message: PropTypes.object.isRequired,\n  handleMessageClick: PropTypes.func.isRequired,\n};\n","import React, { useState, useContext } from \"react\";\nimport { Box, Input, InputGroup, IconButton } from \"@chakra-ui/core\";\nimport EmailContext from \"../../context/email/emailContext\";\n\nconst SearchBar = () => {\n  const { getMessagesQuery, loading } = useContext(EmailContext);\n  const [query, setQuery] = useState(\"\");\n\n  const handleOnChange = (e) => setQuery(e.target.value);\n\n  const handleQuery = (e) => {\n    if (!query) return;\n    if (e.keyCode === 13 || e.type === \"click\") getMessagesQuery(query);\n  };\n\n  return (\n    <Box py='5px' bg='white' border='1px' borderColor='gray.200'>\n      <InputGroup size='lg'>\n        <IconButton\n          icon='search'\n          variant='ghost'\n          variantColor='blue'\n          marginLeft='5px'\n          aria-label='Search messages'\n          onClick={handleQuery}\n          isLoading={loading}\n        />\n        <Input\n          type='text'\n          placeholder='Search mail'\n          borderWidth='0px'\n          borderRadius='0px'\n          focusBorderColor='white'\n          value={query}\n          onChange={handleOnChange}\n          onKeyDown={handleQuery}\n        />\n      </InputGroup>\n    </Box>\n  );\n};\n\nexport default SearchBar;\n","import React, { useContext } from \"react\";\nimport EmailContext from \"../../context/email/emailContext\";\n\nimport EmailRow from \"./EmailRow\";\nimport SearchBar from \"./SearchBar\";\n\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Flex, Box, Spinner } from \"@chakra-ui/core\";\n\nconst Messages = () => {\n  const {\n    messages,\n    getOneMessage,\n    hasMoreMessages,\n    loadMoreMessages,\n  } = useContext(EmailContext);\n\n  const handleMessageClick = (e) => {\n    const messageId = e.currentTarget.getAttribute(\"id\");\n    getOneMessage(messageId);\n  };\n\n  return (\n    <Box overflowY='auto' id='scrollableDiv'>\n      <InfiniteScroll\n        dataLength={messages.length}\n        next={loadMoreMessages}\n        hasMore={hasMoreMessages}\n        loader={<h4>Loading...</h4>}\n        scrollableTarget='scrollableDiv'\n      >\n        {messages.map((message, index) => (\n          <EmailRow\n            key={index}\n            message={message}\n            handleMessageClick={handleMessageClick}\n          />\n        ))}\n      </InfiniteScroll>\n    </Box>\n  );\n};\n\nconst CustomSpinner = () => (\n  <Box mt={6} display='flex' align='center' justifyContent='center'>\n    <Spinner\n      thickness='4px'\n      speed='0.65s'\n      emptyColor='gray.200'\n      color='blue.500'\n      size='xl'\n    />\n  </Box>\n);\n\nconst EmailList = () => {\n  const { messages, loading } = useContext(EmailContext);\n\n  return (\n    <Flex\n      direction='column'\n      wrap='no-wrap'\n      w='26%'\n      h='100%'\n      bg='#f1f1f1'\n      color='black'\n    >\n      {/* Search bar */}\n      <SearchBar />\n\n      {/* Messages */}\n      {!messages.length && loading ? <CustomSpinner /> : <Messages />}\n    </Flex>\n  );\n};\n\nexport default EmailList;\n","import React, { Fragment } from \"react\";\nimport { Base64 } from \"js-base64\";\nimport { MdReplay } from \"react-icons/md\";\nimport PropTypes from \"prop-types\";\nimport {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Input,\n  FormControl,\n  Textarea,\n  useToast,\n  useDisclosure,\n} from \"@chakra-ui/core\";\n\nconst ReplyModel = ({ replayData }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const toast = useToast();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const form = e.target;\n    const emailTo = form.elements[\"emailTo\"].value;\n    const subject = form.elements[\"subject\"].value;\n    const replayMsgId = form.elements[\"reply-message-id\"].value;\n    const message = form.elements[\"message\"].value;\n\n    // Send Replay\n    sendMessage(\n      {\n        To: emailTo,\n        Subject: subject,\n        \"In-Reply-To\": replayMsgId,\n      },\n      message,\n      displayToast\n    );\n\n    onClose();\n  };\n\n  const sendMessage = (headers_obj, message, callback) => {\n    let email = \"\";\n\n    for (let header in headers_obj)\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\n\n    email += \"\\r\\n\" + message;\n\n    const base64EncodedEmail = Base64.encodeURI(email);\n    const request = window.gapi.client.gmail.users.messages.send({\n      userId: \"me\",\n      resource: {\n        raw: base64EncodedEmail,\n      },\n    });\n\n    request.execute(callback);\n  };\n\n  const displayToast = ({ result }) => {\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\n      toast({\n        title: \"Message Sent.\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } else {\n      toast({\n        title: \"An error occurred.\",\n        description: \"Unable to sent your replay.\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  return (\n    <Fragment>\n      <Button\n        rightIcon={MdReplay}\n        variantColor='blue'\n        variant='outline'\n        onClick={onOpen}\n      >\n        Replay\n      </Button>\n      <Modal\n        isOpen={isOpen}\n        size='xl'\n        onClose={onClose}\n        closeOnOverlayClick={false}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Replay </ModalHeader>\n          <ModalCloseButton />\n          <form id='form' onSubmit={handleSubmit}>\n            <ModalBody>\n              <Input\n                type='hidden'\n                id='reply-message-id'\n                value={replayData.msgId}\n                readOnly\n              />\n              <FormControl isRequired>\n                <Input\n                  type='email'\n                  id='emailTo'\n                  placeholder='To'\n                  aria-describedby='email-helper-text'\n                  value={replayData.to}\n                  readOnly\n                />\n              </FormControl>\n              <FormControl isRequired>\n                <Input\n                  type='text'\n                  id='subject'\n                  placeholder='Subject'\n                  aria-describedby='subject-email-helper-text'\n                  value={replayData.subject}\n                  readOnly\n                />\n              </FormControl>\n              <FormControl isRequired>\n                <Textarea\n                  id='message'\n                  minH='280px'\n                  size='xl'\n                  resize='vertical'\n                />\n              </FormControl>\n            </ModalBody>\n\n            <ModalFooter>\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\n                Close\n              </Button>\n              <Button type='submit' variantColor='green'>\n                Send\n              </Button>\n            </ModalFooter>\n          </form>\n        </ModalContent>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default ReplyModel;\n\nReplyModel.prototype = {\n  replayData: PropTypes.object.isRequired,\n};\n","import React, { Fragment } from \"react\";\nimport { Base64 } from \"js-base64\";\nimport { MdArrowForward } from \"react-icons/md\";\nimport { getHeader } from \"../Helper\";\nimport PropTypes from \"prop-types\";\nimport {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Input,\n  FormControl,\n  Textarea,\n  useToast,\n  useDisclosure,\n} from \"@chakra-ui/core\";\n\nconst ForwardModel = ({ forwardData, getMessageBody }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const toast = useToast();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const form = e.target;\n    const forwardTo = form.elements[\"emailTo\"].value;\n    handleForwardMsg(\n      forwardTo,\n      forwardData.payload.headers,\n      getMessageBody(forwardData.payload)\n    );\n    onClose();\n  };\n\n  const handleForwardMsg = (forwardTo, headers, body) => {\n    let email = \"\";\n    email += `From: ${getHeader(headers, \"From\")} \\r\\n`;\n    email += `Date: ${getHeader(headers, \"Date\")} \\r\\n`;\n    email += `Subject: ${getHeader(headers, \"Subject\")} \\r\\n`;\n    email += `To: ${forwardTo} \\r\\n`;\n    email += `Content-Type: text/html; charset=UTF-8 \\r\\n`;\n    email += `\\r\\n ${body}`;\n\n    sendMessage(\"me\", email, displayToast);\n  };\n\n  const sendMessage = (userId, email, callback) => {\n    const base64EncodedEmail = Base64.encodeURI(email);\n    const request = window.gapi.client.gmail.users.messages.send({\n      userId: userId,\n      resource: {\n        raw: base64EncodedEmail,\n      },\n    });\n    request.execute(callback);\n  };\n\n  const displayToast = ({ result }) => {\n    if (result.labelIds.indexOf(\"SENT\") !== -1) {\n      toast({\n        title: \"Email forwarded Successfully.\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } else {\n      toast({\n        title: \"An error occurred.\",\n        description: \"Unable to sent your mail.\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const getForwardHead = (headers) => {\n    let msg = \"\";\n    msg += \"From: \" + getHeader(headers, \"From\") + \"\\r\\n\";\n    msg += \"Date: \" + getHeader(headers, \"Date\") + \"\\r\\n\";\n    msg += \"Subject: \" + getHeader(headers, \"Subject\") + \"\\r\\n\";\n    msg += \"To: \" + getHeader(headers, \"To\") + \"\\r\\n\";\n    return msg;\n  };\n\n  return (\n    <Fragment>\n      <Button\n        rightIcon={MdArrowForward}\n        variantColor='blue'\n        variant='outline'\n        onClick={onOpen}\n      >\n        Forward\n      </Button>\n\n      <Modal\n        isOpen={isOpen}\n        size='xl'\n        onClose={onClose}\n        closeOnOverlayClick={false}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Forward </ModalHeader>\n          <ModalCloseButton />\n          <form id='form' onSubmit={handleSubmit}>\n            <ModalBody>\n              <FormControl isRequired>\n                <Input\n                  type='email'\n                  id='emailTo'\n                  placeholder='To'\n                  aria-describedby='email-helper-text'\n                />\n              </FormControl>\n              <FormControl isRequired>\n                <Input\n                  type='text'\n                  id='subject'\n                  placeholder='Subject'\n                  aria-describedby='subject-email-helper-text'\n                  value={getHeader(forwardData.payload.headers, \"Subject\")}\n                  readOnly\n                />\n              </FormControl>\n              <FormControl isRequired>\n                <Textarea\n                  id='message'\n                  minH='280px'\n                  size='xl'\n                  resize='vertical'\n                  value={\n                    \"------Forward Message------\\r\\n\" +\n                    getForwardHead(forwardData.payload.headers)\n                  }\n                  readOnly\n                />\n              </FormControl>\n            </ModalBody>\n\n            <ModalFooter>\n              <Button type='reset' variantColor='blue' mr={3} onClick={onClose}>\n                Close\n              </Button>\n              <Button type='submit' variantColor='green'>\n                Send\n              </Button>\n            </ModalFooter>\n          </form>\n        </ModalContent>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default ForwardModel;\n\nForwardModel.prototype = {\n  forwardData: PropTypes.object.isRequired,\n  getMessageBody: PropTypes.func.isRequired,\n};\n","import React, { Fragment, useContext } from \"react\";\nimport EmailContext from \"../../context/email/emailContext\";\n\nimport ReplyModel from \"./ReplyModel\";\nimport ForwardModel from \"./ForwardModel\";\n\nimport { getHeader, removeQuote, formatDate } from \"../Helper\"; // Helper functions\nimport { Base64 } from \"js-base64\";\nimport { MdArchive } from \"react-icons/md\"; // Icons\nimport {\n  Flex,\n  Box,\n  Button,\n  AspectRatioBox,\n  Avatar,\n  Text,\n  useToast,\n  Heading,\n} from \"@chakra-ui/core\";\n\nimport emptyEmailImg from \"./empty_email.svg\";\n\nconst Email = () => {\n  const { message } = useContext(EmailContext);\n  const headers = message ? message.payload.headers : [];\n  const toast = useToast();\n\n  React.useEffect(() => {\n    if (message) {\n      addToFrame(message);\n    }\n    // eslint-disable-next-line\n  }, [message]);\n\n  const formatReplayData = (headers) => {\n    const replayTo =\n      getHeader(headers, \"Reply-to\") !== undefined\n        ? getHeader(headers, \"Reply-to\")\n        : getHeader(headers, \"From\");\n    const replaySubject = getHeader(headers, \"Subject\");\n    const replayMsgId = getHeader(headers, \"Message-ID\");\n\n    return {\n      to: `${replayTo}`,\n      subject: `Re: ${replaySubject}`,\n      msgId: `${replayMsgId}`,\n    };\n  };\n\n  const handleTrashBtn = (userId, messageId) => {\n    return window.gapi.client.gmail.users.messages\n      .trash({\n        userId: userId,\n        id: messageId,\n      })\n      .then((resp) => {\n        if (resp.status === 200) {\n          toast({\n            title: \"Message Deleted\",\n            status: \"error\",\n            duration: 3000,\n            isClosable: true,\n          });\n        }\n      })\n      .catch((error) => {\n        console.log(\"error: \", error);\n        toast({\n          title: \"An error occurred.\",\n          description: \"Unable to Delete Message.\",\n          status: \"warning\",\n          duration: 3000,\n          isClosable: true,\n        });\n      });\n  };\n\n  const handleArchiveBtn = (ids, labelIds) => {\n    return window.gapi.client.gmail.users.messages\n      .batchModify({\n        userId: \"me\",\n        resource: {\n          ids: ids,\n          removeLabelIds: labelIds,\n        },\n      })\n      .then((resp) => {\n        if (resp.status === 204) {\n          toast({\n            title: \"Message Archived\",\n            description: \"The Message is now in archive category.\",\n            status: \"success\",\n            duration: 3000,\n            isClosable: true,\n          });\n        }\n      })\n      .catch((error) => {\n        console.log(\"error: \", error);\n        toast({\n          title: \"An error occurred.\",\n          description: \"Unable to Archive Message.\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true,\n        });\n      });\n  };\n\n  const addToFrame = (message) => {\n    let ifrm = document.getElementById(\"iframe\").contentWindow.document;\n    ifrm.body.innerHTML = getMessageBody(message.payload);\n  };\n\n  const getMessageBody = (message) => {\n    const encodedBody =\n      typeof message.parts === \"undefined\"\n        ? message.body.data\n        : getHTMLPart(message.parts);\n\n    return Base64.decode(encodedBody);\n  };\n\n  const getHTMLPart = (arr) => {\n    for (var x = 0; x <= arr.length; x++) {\n      if (typeof arr[x].parts === \"undefined\") {\n        if (arr[x].mimeType === \"text/html\") {\n          return arr[x].body.data;\n        }\n      } else {\n        return getHTMLPart(arr[x].parts);\n      }\n    }\n    return \"\";\n  };\n\n  return (\n    <Flex\n      direction='column'\n      wrap='no-wrap'\n      w='58%'\n      h='100%'\n      p='0.6rem 1rem'\n      bg='white'\n      color='black'\n      border='1px'\n      borderColor='gray.200'\n      borderTopRightRadius='md'\n      borderBottomRightRadius='md'\n    >\n      {!message ? (\n        <EmptyMail />\n      ) : (\n        <Fragment>\n          {/* Header Buttons */}\n          <Flex justify='space-around' wrap='no-wrap' mb={2}>\n            <ReplyModel replayData={formatReplayData(headers)} />\n            <ForwardModel\n              forwardData={message}\n              getMessageBody={getMessageBody}\n            />\n            <Button\n              rightIcon={MdArchive}\n              variantColor='blue'\n              variant='outline'\n              onClick={() => handleArchiveBtn([message.id], [\"INBOX\"])}\n            >\n              Archive\n            </Button>\n            <Button\n              rightIcon='delete'\n              variantColor='blue'\n              variant='outline'\n              onClick={() => handleTrashBtn(\"me\", message.id)}\n            >\n              Delete\n            </Button>\n          </Flex>\n\n          {/* Mail Container */}\n          <Flex\n            className='mailContainer'\n            flexGrow='2'\n            direction='column'\n            wrap='no-wrap'\n            p={2}\n          >\n            <Box className='mailHeader' mb={2}>\n              <Text fontSize='lg' fontWeight='bold' color='gray.700' mb={1}>\n                {getHeader(headers, \"Subject\")}\n              </Text>\n              <Flex wrap='no-wrap' justify='flex-start'>\n                <Avatar\n                  name={removeQuote(getHeader(headers, \"From\").split(\"<\")[0])}\n                  src='https://bit.ly/tioluwani-kolawole'\n                  mr={4}\n                />\n                <Box w='80%'>\n                  <Text fontSize='md' color='gray.700'>\n                    {getHeader(headers, \"From\")}\n                  </Text>\n                  <Text fontSize='sm' color='gray.500'>\n                    {formatDate(getHeader(headers, \"Date\"))}\n                  </Text>\n                </Box>\n              </Flex>\n              <Text fontSize='sm' color='gray.700' mt={1}>\n                {`To: ${getHeader(headers, \"To\")}`}\n              </Text>\n            </Box>\n            <Box className='mailBody' flexGrow='2'>\n              <AspectRatioBox ratio={16 / 9} h='100%'>\n                <Box as='iframe' id='iframe' title='messageBody'>\n                  <p>Your browser does not support iframes.</p>\n                </Box>\n              </AspectRatioBox>\n            </Box>\n          </Flex>\n        </Fragment>\n      )}\n    </Flex>\n  );\n};\n\nexport default Email;\n\nconst EmptyMail = () => (\n  <Flex\n    flexDirection='column'\n    justify='center'\n    alignItems='center'\n    mb={3}\n    style={{ height: \"100%\" }}\n  >\n    <img\n      src={emptyEmailImg}\n      alt='React Logo'\n      style={{ width: \"40%\", height: \"auto\" }}\n    />\n    <Heading as='h3' size='lg' color='#a6b0b7' mt={5}>\n      Click on Email to Open it\n    </Heading>\n  </Flex>\n);\n","import React, { useEffect, useContext } from \"react\";\nimport EmailContext from \"../context/email/emailContext\"\n\n// Import Components\nimport MailboxList from \"../Components/MailboxList/MailboxList\";\nimport EmailList from \"../Components/EmailList/EmailList\";\nimport Email from \"../Components/Email/Email\";\n\nimport { Flex } from \"@chakra-ui/core\";\n\nconst Main = () => {\n  const { getMessages } = useContext(EmailContext);\n\n  useEffect(() => {\n    getMessages();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Flex\n      h='100vh'\n      minH='600px'\n      justify='space-arround'\n      wrap='no-wrap'\n      p='1em'\n      bg='#e5f4f1'\n      color='white'\n    >\n      <MailboxList />\n      <EmailList />\n      <Email />\n    </Flex>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport { Button, Flex } from \"@chakra-ui/core\";\nimport { FcGoogle } from \"react-icons/fc\";\n\nconst SignIn = ({ handleAuthClick, loading }) => (\n  <Flex h='100vh' justify='center' alignItems='center' bg='#e5f4f1'>\n    <Button\n      isLoading={loading}\n      leftIcon={FcGoogle}\n      height='50px'\n      variantColor='blue'\n      variant='outline'\n      backgroundColor='white'\n      onClick={handleAuthClick}\n    >\n      Sign in with Google\n    </Button>\n  </Flex>\n);\n\nexport default SignIn;\n","import React, { useEffect, useState } from \"react\";\n\n// Import Context\nimport EmailState from \"./context/email/EmailState\";\n\n// Import Pages\nimport Main from \"./pages/Main\";\nimport SignIn from \"./pages/SignIn\";\n\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\n\nconst App = () => {\n  const [isAuthorize, setIsAuthorize] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      await window.gapi.load(\"client:auth2\", {\n        callback: () => {\n          // Handle gapi.client initialization.\n          console.log(\"gmail\",process.env.REACT_APP_API_KEY)\n          window.gapi.client.setApiKey(process.env.REACT_APP_API_KEY);\n          window.gapi.auth.authorize(\n            {\n              client_id: process.env.REACT_APP_CLIENT_ID,\n              scope: process.env.REACT_APP_SCOPES,\n              immediate: true,\n            },\n            handleAuthResult\n          );\n        },\n        onerror: function () {\n          // Handle loading error.\n          console.log(\"gapi.client failed to load!\");\n          setLoading(false);\n        },\n        timeout: 5000, // 5 seconds.\n        ontimeout: function () {\n          // Handle timeout.\n          console.log(\"gapi.client could not load in a timely manner!\");\n        },\n      });\n    })();\n\n    // eslint-disable-next-line\n  }, []);\n\n  const handleAuthResult = (authResult) => {\n    if (authResult && !authResult.error) {\n      console.log(\"Sign-in successful\");\n      // setIsAuthorize(true);\n      loadClient();\n    } else {\n      console.error(\"handleAuthResult...\");\n      console.error(authResult);\n      setLoading(false);\n    }\n  };\n\n  const handleAuthClick = () => {\n    setLoading(true);\n    return window.gapi.auth.authorize(\n      {\n        client_id: process.env.REACT_APP_CLIENT_ID,\n        scope: process.env.REACT_APP_SCOPES,\n        immediate: false,\n      },\n      handleAuthResult\n    );\n  };\n\n  const loadClient = () => {\n    return window.gapi.client.load(\"gmail\", \"v1\").then(\n      (res) => {\n        console.log(\"gapi client loaded for API\");\n        setIsAuthorize(true);\n        // getMessages();\n      },\n      (err) => {\n        console.error(\"Error loading window.gapi client for API\", err);\n      }\n    );\n  };\n\n  return (\n    <EmailState>\n      <ThemeProvider>\n        <CSSReset />\n        {isAuthorize ? (\n          <Main />\n        ) : (\n          <SignIn loading={loading} handleAuthClick={handleAuthClick} />\n        )}\n      </ThemeProvider>\n    </EmailState>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n","module.exports = __webpack_public_path__ + \"static/media/empty_email.c9034baf.svg\";"],"sourceRoot":""}